# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/rubocop-rails/all/rubocop-rails.rbi
#
# rubocop-rails-2.32.0

module RuboCop
end
module RuboCop::Rails
end
module RuboCop::Rails::Version
  def self.document_version; end
end
module RuboCop::Rails::SchemaLoader
  def db_schema_path; end
  def load!(target_ruby_version, parser_engine); end
  def load(target_ruby_version, parser_engine); end
  def reset!; end
  extend RuboCop::Rails::SchemaLoader
end
class RuboCop::Rails::SchemaLoader::Schema
  def add_indices; end
  def add_indices_by(table_name:); end
  def build!(ast); end
  def each_add_index(ast); end
  def each_table(ast); end
  def initialize(ast); end
  def table_by(name:); end
  def tables; end
end
class RuboCop::Rails::SchemaLoader::Table
  def build_columns(node); end
  def build_indices(node); end
  def columns; end
  def each_content(node, &block); end
  def indices; end
  def initialize(node); end
  def name; end
  def with_column?(name:); end
end
class RuboCop::Rails::SchemaLoader::Column
  def analyze_keywords!(node); end
  def initialize(node); end
  def name; end
  def not_null; end
  def type; end
end
class RuboCop::Rails::SchemaLoader::Index
  def analyze_keywords!(node); end
  def build_columns_or_expr(columns); end
  def columns; end
  def expression; end
  def initialize(node); end
  def name; end
  def unique; end
end
class RuboCop::Rails::SchemaLoader::AddIndex < RuboCop::Rails::SchemaLoader::Index
  def initialize(node); end
  def table_name; end
end
class RuboCop::Rails::Plugin < LintRoller::Plugin
  def about; end
  def rules(_context); end
  def supported?(context); end
  def without_warnings; end
end
module RuboCop::Cop
end
module RuboCop::Cop::ActiveRecordHelper
  def active_record?(param0 = nil); end
  def external_dependency_checksum; end
  def find_belongs_to(param0); end
  def find_set_table_name(param0); end
  def foreign_key_of(belongs_to); end
  def in_where?(node); end
  def inherit_active_record_base?(node); end
  def polymorphic?(belongs_to); end
  def resolve_relation_into_column(name:, class_node:, table:); end
  def schema; end
  def table_name(class_node); end
  extend RuboCop::AST::NodePattern::Macros
end
module RuboCop::Cop::ActiveRecordMigrationsHelper
  def create_table_with_block?(param0 = nil); end
  extend RuboCop::AST::NodePattern::Macros
end
module RuboCop::Cop::ClassSendNodeHelper
  def class_send_nodes(class_node); end
end
module RuboCop::Cop::DatabaseTypeResolvable
  def database; end
  def database_adapter; end
  def database_from_env; end
  def database_from_yaml; end
  def database_yaml; end
end
module RuboCop::Cop::EnforceSuperclass
  def on_class(node); end
  def on_send(node); end
  def register_offense(offense_node); end
  def self.included(base); end
end
module RuboCop::Cop::IndexMethod
  def execute_correction(corrector, node, correction); end
  def extract_captures(match); end
  def handle_possible_offense(node, match, match_desc); end
  def new_method_name; end
  def on_bad_each_with_object(_node); end
  def on_bad_hash_brackets_map(_node); end
  def on_bad_map_to_h(_node); end
  def on_bad_to_h(_node); end
  def on_block(node); end
  def on_csend(node); end
  def on_itblock(node); end
  def on_numblock(node); end
  def on_send(node); end
  def prepare_correction(node); end
end
class RuboCop::Cop::IndexMethod::Captures < Struct
  def noop_transformation?; end
  def self.[](*arg0); end
  def self.inspect; end
  def self.keyword_init?; end
  def self.members; end
  def self.new(*arg0); end
  def transformed_argname; end
  def transformed_argname=(_); end
  def transforming_body_expr; end
  def transforming_body_expr=(_); end
end
class RuboCop::Cop::IndexMethod::Autocorrection < Struct
  def block_node; end
  def block_node=(_); end
  def leading; end
  def leading=(_); end
  def match; end
  def match=(_); end
  def self.[](*arg0); end
  def self.from_each_with_object(node, match); end
  def self.from_hash_brackets_map(node, match); end
  def self.from_map_to_h(node, match); end
  def self.from_to_h(node, match); end
  def self.inspect; end
  def self.keyword_init?; end
  def self.members; end
  def self.new(*arg0); end
  def set_new_arg_name(transformed_argname, corrector); end
  def set_new_body_expression(transforming_body_expr, corrector); end
  def set_new_method_name(new_method_name, corrector); end
  def strip_prefix_and_suffix(node, corrector); end
  def trailing; end
  def trailing=(_); end
end
module RuboCop::Cop::MigrationsHelper
  def in_migration?(node); end
  def migration_class?(param0 = nil); end
  extend RuboCop::AST::NodePattern::Macros
end
module RuboCop::Cop::RoutesHelper
  def routes_draw?(param0 = nil); end
  def within_routes?(node); end
  extend RuboCop::AST::NodePattern::Macros
end
module RuboCop::Cop::TargetRailsVersion
  def minimum_target_rails_version(version); end
  def support_target_rails_version?(version); end
end
module RuboCop::Cop::Rails
end
class RuboCop::Cop::Rails::ActionControllerFlashBeforeRender < RuboCop::Cop::Base
  def action_controller?(param0); end
  def find_ancestor(node, type:); end
  def flash_assignment?(param0); end
  def followed_by_render?(flash_node); end
  def inherit_action_controller_base?(node); end
  def instance_method_or_block?(node); end
  def on_send(flash_node); end
  def render?(param0); end
  def use_redirect_to?(context); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Rails::StrongParametersExpect < RuboCop::Cop::Base
  def expect_method(require_method, permit_method); end
  def offense_range(method_node, node); end
  def on_csend(node); end
  def on_send(node); end
  def params_permit_require(param0 = nil); end
  def params_require_permit(param0 = nil); end
  def require_key(require_method); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetRailsVersion
end
class RuboCop::Cop::Rails::ActionControllerTestCase < RuboCop::Cop::Base
  def action_controller_test_case?(param0 = nil); end
  def on_class(node); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetRailsVersion
end
class RuboCop::Cop::Rails::ActionFilter < RuboCop::Cop::Base
  def bad_methods; end
  def check_method_node(node); end
  def good_methods; end
  def on_block(node); end
  def on_send(node); end
  def preferred_method(method); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::ConfigurableEnforcedStyle
end
class RuboCop::Cop::Rails::ActionOrder < RuboCop::Cop::Base
  def action_declarations(param0, param1); end
  def actions; end
  def add_range(range1, range2); end
  def correction_target(def_node); end
  def expected_order; end
  def find_index(node); end
  def on_class(node); end
  def range_with_comments(node); end
  def range_with_comments_and_lines(node); end
  def register_offense(previous, current); end
  def swap_range(corrector, range1, range2); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::DefNode
  include RuboCop::Cop::RangeHelp
  include RuboCop::Cop::VisibilityHelp
end
class RuboCop::Cop::Rails::ActiveRecordAliases < RuboCop::Cop::Base
  def on_csend(node); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Rails::ActiveRecordCallbacksOrder < RuboCop::Cop::Base
  def autocorrect(corrector, node); end
  def begin_pos_with_comment(node); end
  def buffer; end
  def callback?(node); end
  def defined_callbacks(class_node); end
  def end_position_for(node); end
  def inline_comment?(comment); end
  def on_class(class_node); end
  def source_range_with_comment(node); end
  def start_line_position(node); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Rails::ActiveRecordOverride < RuboCop::Cop::Base
  def active_model?(parent_class_name); end
  def callback_names(method_name); end
  def find_parent_class_name(node); end
  def message(method_name); end
  def on_def(node); end
end
class RuboCop::Cop::Rails::ActiveSupportAliases < RuboCop::Cop::Base
  def append(param0 = nil); end
  def ends_with?(param0 = nil); end
  def on_csend(node); end
  def on_send(node); end
  def prepend(param0 = nil); end
  def starts_with?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Rails::ActiveSupportOnLoad < RuboCop::Cop::Base
  def hook_for_const(const_name); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Rails::AddColumnIndex < RuboCop::Cop::Base
  def add_column_with_index(param0 = nil); end
  def index_range(pair_node); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::MigrationsHelper
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Rails::AfterCommitOverride < RuboCop::Cop::Base
  def after_commit_callback?(node); end
  def each_after_commit_callback(class_node); end
  def named_callback?(node); end
  def on_class(class_node); end
  include RuboCop::Cop::ClassSendNodeHelper
end
class RuboCop::Cop::Rails::ApplicationController < RuboCop::Cop::Base
  def class_definition(param0 = nil); end
  def class_new_definition(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::EnforceSuperclass
end
class RuboCop::Cop::Rails::ApplicationJob < RuboCop::Cop::Base
  def autocorrect(node); end
  def class_definition(param0 = nil); end
  def class_new_definition(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetRailsVersion
  include RuboCop::Cop::EnforceSuperclass
end
class RuboCop::Cop::Rails::ApplicationMailer < RuboCop::Cop::Base
  def class_definition(param0 = nil); end
  def class_new_definition(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetRailsVersion
  include RuboCop::Cop::EnforceSuperclass
end
class RuboCop::Cop::Rails::ApplicationRecord < RuboCop::Cop::Base
  def class_definition(param0 = nil); end
  def class_new_definition(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetRailsVersion
  include RuboCop::Cop::EnforceSuperclass
end
class RuboCop::Cop::Rails::ArelStar < RuboCop::Cop::Base
  def on_send(node); end
  def star_bracket?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Rails::AssertNot < RuboCop::Cop::Base
  def corrected_source(source); end
  def offensive?(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Rails::AttributeDefaultBlockValue < RuboCop::Cop::Base
  def attribute(param0 = nil); end
  def default_attribute(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Rails::BelongsTo < RuboCop::Cop::Base
  def match_belongs_to_with_options(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetRailsVersion
end
class RuboCop::Cop::Rails::Blank < RuboCop::Cop::Base
  def autocorrect(corrector, node); end
  def defining_blank?(param0 = nil); end
  def nil_or_empty?(param0 = nil); end
  def not_present?(param0 = nil); end
  def on_if(node); end
  def on_or(node); end
  def on_send(node); end
  def replacement(node); end
  def unless_condition(node, method_call); end
  def unless_present?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Rails::BulkChangeTable < RuboCop::Cop::Base
  def add_offense_for_alter_methods(node); end
  def add_offense_for_change_table(node); end
  def call_to_combinable_alter_method?(child_node); end
  def combinable_alter_methods; end
  def combinable_transformations; end
  def count_transformations(send_nodes); end
  def include_bulk_options?(node); end
  def on_def(node); end
  def on_send(node); end
  def send_nodes_from_change_table_block(body); end
  def support_bulk_alter?; end
  include RuboCop::Cop::DatabaseTypeResolvable
  include RuboCop::Cop::MigrationsHelper
end
class RuboCop::Cop::Rails::BulkChangeTable::AlterMethodsRecorder
  def flush; end
  def initialize; end
  def offensive_nodes; end
  def process(new_node); end
end
class RuboCop::Cop::Rails::CompactBlank < RuboCop::Cop::Base
  def bad_method?(node); end
  def offense_range(node); end
  def on_send(node); end
  def preferred_method(node); end
  def reject_with_block?(param0 = nil); end
  def reject_with_block_pass?(param0 = nil); end
  def select_with_block?(param0 = nil); end
  def select_with_block_pass?(param0 = nil); end
  def use_hash_value_block_argument?(arguments, receiver_in_block); end
  def use_single_value_block_argument?(arguments, receiver_in_block); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetRailsVersion
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Rails::ContentTag < RuboCop::Cop::Base
  def allowed_argument?(argument); end
  def allowed_name?(argument); end
  def autocorrect(corrector, node, preferred_method); end
  def corrected_ancestor?(node); end
  def correction_range(node); end
  def on_new_investigation; end
  def on_send(node); end
  def register_offense(node, message, preferred_method); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetRailsVersion
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Rails::CreateTableWithTimestamps < RuboCop::Cop::Base
  def create_table_with_timestamps_proc?(param0 = nil); end
  def created_at_or_updated_at_included?(param0); end
  def on_send(node); end
  def time_columns_included?(node); end
  def timestamps_included?(param0); end
  def use_id_false_option?(param0); end
  include RuboCop::Cop::ActiveRecordMigrationsHelper
end
class RuboCop::Cop::Rails::DangerousColumnNames < RuboCop::Cop::Base
  def column_name_node_from(node); end
  def dangerous_column_name?(column_name); end
  def dangerous_column_name_node?(node); end
  def on_send(node); end
  include RuboCop::Cop::MigrationsHelper
end
class RuboCop::Cop::Rails::Date < RuboCop::Cop::Base
  def allow_to_time?; end
  def bad_days; end
  def bad_methods; end
  def check_date_node(node); end
  def check_deprecated_methods(node); end
  def extract_method_chain(node); end
  def good_days; end
  def good_methods; end
  def method_send?(node); end
  def on_const(node); end
  def on_csend(node); end
  def on_send(node); end
  def safe_chain?(node); end
  def safe_to_time?(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::ConfigurableEnforcedStyle
end
class RuboCop::Cop::Rails::DefaultScope < RuboCop::Cop::Base
  def class_method_definition?(param0 = nil); end
  def eigenclass_method_definition?(param0 = nil); end
  def method_call?(param0 = nil); end
  def on_defs(node); end
  def on_sclass(node); end
  def on_send(node); end
end
class RuboCop::Cop::Rails::Delegate < RuboCop::Cop::Base
  def arguments_match?(arg_array, body); end
  def build_delegation(node, receiver); end
  def delegate?(param0 = nil); end
  def determine_prefixed_method_receiver_name(receiver); end
  def determine_register_offense_receiver(receiver); end
  def full_const_name(node); end
  def include_prefix_case?; end
  def method_name_matches?(method_name, body); end
  def module_function_declared?(node); end
  def on_def(node); end
  def prefixed_method_name(body); end
  def private_or_protected_delegation(node); end
  def private_or_protected_inline(node); end
  def register_offense(node); end
  def trivial_delegate?(def_node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::VisibilityHelp
end
class RuboCop::Cop::Rails::DelegateAllowBlank < RuboCop::Cop::Base
  def allow_blank_option(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Rails::DeprecatedActiveModelErrorsMethods < RuboCop::Cop::Base
  def any_manipulation?(param0 = nil); end
  def autocorrect(corrector, node); end
  def errors_deprecated?(param0 = nil); end
  def messages_details_assignment?(param0 = nil); end
  def messages_details_manipulation?(param0 = nil); end
  def model_file?; end
  def offense_range(node, receiver); end
  def on_send(node); end
  def receiver_matcher(node); end
  def receiver_matcher_inside_model(param0 = nil); end
  def receiver_matcher_outside_model(param0 = nil); end
  def replacement(node, receiver); end
  def root_assignment?(param0 = nil); end
  def root_manipulation?(param0 = nil); end
  def skip_autocorrect?(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Rails::DotSeparatedKeys < RuboCop::Cop::Base
  def new_key(key_node, scope_node); end
  def on_send(node); end
  def scopes(scope_node); end
  def should_convert_scope?(scope_node); end
  def translate_with_scope?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Rails::DuplicateAssociation < RuboCop::Cop::Base
  def association(param0 = nil); end
  def association_nodes(class_node); end
  def class_name(param0 = nil); end
  def duplicated_association_name_nodes(association_nodes); end
  def duplicated_class_name_nodes(association_nodes); end
  def leave_duplicated_association(grouped_associations); end
  def on_class(class_node); end
  def register_offense(name, nodes, message_template); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::ActiveRecordHelper
  include RuboCop::Cop::ClassSendNodeHelper
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Rails::DuplicateScope < RuboCop::Cop::Base
  def offenses(class_node); end
  def on_class(class_node); end
  def scope(param0 = nil); end
  include RuboCop::Cop::ClassSendNodeHelper
end
class RuboCop::Cop::Rails::DurationArithmetic < RuboCop::Cop::Base
  def corrected_source(operator, duration); end
  def duration?(param0 = nil); end
  def duration_arithmetic_argument?(param0 = nil); end
  def on_send(node); end
  def time_current?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Rails::DynamicFindBy < RuboCop::Cop::Base
  def allowed_invocation?(node); end
  def allowed_method?(node); end
  def allowed_receiver?(node); end
  def autocorrect(corrector, node); end
  def autocorrect_argument_keywords(corrector, node, keywords); end
  def autocorrect_method_name(corrector, node); end
  def column_keywords(method); end
  def dynamic_find_by_arguments?(node); end
  def dynamic_find_by_arguments_count?(node); end
  def dynamic_find_by_arguments_type?(node); end
  def on_csend(node); end
  def on_send(node); end
  def static_method_name(method_name); end
  def whitelisted?(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::ActiveRecordHelper
end
class RuboCop::Cop::Rails::EagerEvaluationLogMessage < RuboCop::Cop::Base
  def interpolated_string_passed_to_debug(param0 = nil); end
  def on_send(node); end
  def replacement_range(node); end
  def replacement_source(node, arguments); end
  def self.autocorrect_incompatible_with; end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Rails::EnumHash < RuboCop::Cop::Base
  def array_pair?(param0 = nil); end
  def build_hash(array); end
  def enum_name(key); end
  def enum_with_array?(param0 = nil); end
  def enum_with_old_syntax?(param0 = nil); end
  def message(key); end
  def on_send(node); end
  def source(elem); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Rails::EnumSyntax < RuboCop::Cop::Base
  def check_and_correct_keyword_args(node); end
  def check_enum_options(node); end
  def correct_keyword_args(node, key, values, options); end
  def correct_options(options); end
  def enum?(param0 = nil); end
  def enum_name(elem); end
  def enum_name_value(key); end
  def enum_with_options?(param0 = nil); end
  def multiple_enum_definitions?(node); end
  def on_send(node); end
  def option_key?(pair); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetRailsVersion
  extend RuboCop::Cop::TargetRubyVersion
end
class RuboCop::Cop::Rails::EnumUniqueness < RuboCop::Cop::Base
  def enum?(param0 = nil); end
  def enum_name(key); end
  def enum_values(param0 = nil); end
  def enum_with_old_syntax?(param0 = nil); end
  def message(key, item); end
  def on_send(node); end
  include RuboCop::Cop::Duplication
end
class RuboCop::Cop::Rails::EnvLocal < RuboCop::Cop::Base
  def on_and(node); end
  def on_or(node); end
  def rails_env_local_and?(param0 = nil); end
  def rails_env_local_or?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetRailsVersion
end
class RuboCop::Cop::Rails::EnvironmentComparison < RuboCop::Cop::Base
  def autocorrect(corrector, node); end
  def build_predicate_method(node); end
  def build_predicate_method_for_rails_env_on_lhs(node); end
  def build_predicate_method_for_rails_env_on_rhs(node); end
  def comparing_str_env_with_rails_env_on_lhs?(param0 = nil); end
  def comparing_str_env_with_rails_env_on_rhs?(param0 = nil); end
  def comparing_sym_env_with_rails_env_on_lhs?(param0 = nil); end
  def comparing_sym_env_with_rails_env_on_rhs?(param0 = nil); end
  def content(param0 = nil); end
  def on_send(node); end
  def rails_env_on_lhs?(node); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Rails::EnvironmentVariableAccess < RuboCop::Cop::Base
  def allow_reads?; end
  def allow_writes?; end
  def env_read?(param0); end
  def env_write?(param0); end
  def on_const(node); end
end
class RuboCop::Cop::Rails::Exit < RuboCop::Cop::Base
  def offending_node?(node); end
  def on_send(node); end
  def right_argument_count?(arg_nodes); end
  def right_receiver?(receiver_node); end
  include RuboCop::Cop::ConfigurableEnforcedStyle
end
class RuboCop::Cop::Rails::ExpandedDateRange < RuboCop::Cop::Base
  def allow?(begin_node, end_node); end
  def any_arguments?(begin_node, end_node); end
  def on_irange(node); end
  def preferred_method(begin_node); end
  def receiver_source(node); end
  def register_offense(node, preferred_method); end
  def same_argument?(begin_node, end_node); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetRailsVersion
end
class RuboCop::Cop::Rails::FilePath < RuboCop::Cop::Base
  def append_argument(corrector, node, argument_source); end
  def append_to_string_conversion(corrector, node); end
  def autocorrect_extension_after_rails_root_join_in_dstr(corrector, node, rails_root_index, extension_node); end
  def autocorrect_file_join(corrector, node); end
  def autocorrect_rails_root_join_with_slash_separated_path(corrector, node); end
  def autocorrect_rails_root_join_with_string_arguments(corrector, node); end
  def autocorrect_slash_after_rails_root_in_dstr(corrector, node, rails_root_index); end
  def build_message(require_to_s); end
  def check_for_extension_after_rails_root_join_in_dstr(node); end
  def check_for_file_join_with_rails_root(node); end
  def check_for_rails_root_join_with_slash_separated_path(node); end
  def check_for_rails_root_join_with_string_arguments(node); end
  def check_for_slash_after_rails_root_in_dstr(node); end
  def dstr_separated_by_colon?(node); end
  def extension_node?(node); end
  def extract_rails_root_join_argument_source(node, rails_root_index); end
  def file_join_nodes?(param0 = nil); end
  def find_rails_root_index(node); end
  def inner_range_of(node); end
  def on_dstr(node); end
  def on_send(node); end
  def process_arguments(corrector, arguments); end
  def rails_root_join_nodes?(param0 = nil); end
  def rails_root_nodes?(param0); end
  def register_offense(node, require_to_s:, &block); end
  def remove_first_argument_with_comma(corrector, node); end
  def replace_receiver_with_rails_root(corrector, node); end
  def replace_with_rails_root_join(corrector, node, argument_source); end
  def string_contains_multiple_slashes?(node); end
  def string_contains_slash?(node); end
  def string_with_leading_slash?(node); end
  def valid_arguments_for_file_join_with_rails_root?(arguments); end
  def valid_slash_separated_path_for_rails_root_join?(arguments); end
  def valid_string_arguments_for_rails_root_join?(arguments); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::ConfigurableEnforcedStyle
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Rails::FindBy < RuboCop::Cop::Base
  def autocorrect(corrector, node); end
  def ignore_where_first?; end
  def offense_range(node); end
  def on_csend(node); end
  def on_send(node); end
  def where_method?(receiver); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Rails::FindById < RuboCop::Cop::Base
  def build_good_method(id_value); end
  def find_by?(param0 = nil); end
  def find_by_offense_range(node); end
  def on_csend(node); end
  def on_send(node); end
  def register_offense(range, id_value); end
  def where_take?(param0 = nil); end
  def where_take_offense_range(node, where); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Rails::FindEach < RuboCop::Cop::Base
  def active_model_error?(node); end
  def active_model_error_where?(node); end
  def ignored?(node); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::ActiveRecordHelper
  include RuboCop::Cop::AllowedMethods
  include RuboCop::Cop::AllowedPattern
end
class RuboCop::Cop::Rails::FreezeTime < RuboCop::Cop::Base
  def current_time?(node, method_name); end
  def current_time_with_convert?(node, method_name); end
  def on_send(node); end
  def time_now?(param0 = nil); end
  def zoned_time_now?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetRailsVersion
end
class RuboCop::Cop::Rails::HasAndBelongsToMany < RuboCop::Cop::Base
  def on_send(node); end
end
class RuboCop::Cop::Rails::HasManyOrHasOneDependent < RuboCop::Cop::Base
  def active_resource?(node); end
  def active_resource_class?(param0); end
  def association_extension_block?(param0 = nil); end
  def association_with_options?(param0 = nil); end
  def association_without_options?(param0 = nil); end
  def contain_valid_options_in_with_options_block?(node); end
  def dependent_option?(param0 = nil); end
  def extract_option_if_kwsplat(options); end
  def on_send(node); end
  def present_option?(param0 = nil); end
  def readonly?(param0 = nil); end
  def readonly_model?(node); end
  def valid_options?(options); end
  def valid_options_in_with_options_block?(node); end
  def with_options_block(param0 = nil); end
end
class RuboCop::Cop::Rails::HelperInstanceVariable < RuboCop::Cop::Base
  def form_builder_class?(param0 = nil); end
  def inherit_form_builder?(node); end
  def on_ivar(node); end
  def on_ivasgn(node); end
end
class RuboCop::Cop::Rails::HttpPositionalArguments < RuboCop::Cop::Base
  def convert_hash_data(data, type); end
  def correction(node); end
  def correction_template(node); end
  def format_arg?(node); end
  def forwarded_kwrestarg?(param0 = nil); end
  def highlight_range(node); end
  def http_request?(param0 = nil); end
  def in_routing_block?(node); end
  def include_rack_test_methods?(param0 = nil); end
  def kwsplat_hash?(param0 = nil); end
  def needs_conversion?(data); end
  def on_send(node); end
  def special_keyword_arg?(node); end
  def use_rack_test_methods?; end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetRailsVersion
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Rails::HttpStatus < RuboCop::Cop::Base
  def checker_class; end
  def http_status(param0 = nil); end
  def on_send(node); end
  def status_code(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::ConfigurableEnforcedStyle
end
class RuboCop::Cop::Rails::HttpStatus::SymbolicStyleChecker
  def custom_http_status_code?; end
  def initialize(node); end
  def message; end
  def node; end
  def number; end
  def offensive?; end
  def preferred_style; end
  def symbol; end
end
class RuboCop::Cop::Rails::HttpStatus::NumericStyleChecker
  def initialize(node); end
  def message; end
  def node; end
  def number; end
  def offensive?; end
  def permitted_symbol?; end
  def preferred_style; end
  def symbol; end
end
class RuboCop::Cop::Rails::I18nLazyLookup < RuboCop::Cop::Base
  def controller_and_action(node); end
  def controller_path(controller); end
  def get_scoped_key(key_node, controller, action); end
  def handle_explicit_style(node, key_node); end
  def handle_lazy_style(node, key_node); end
  def message(_range); end
  def on_send(node); end
  def translate_call?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::ConfigurableEnforcedStyle
  include RuboCop::Cop::VisibilityHelp
end
class RuboCop::Cop::Rails::I18nLocaleAssignment < RuboCop::Cop::Base
  def i18n_locale_assignment?(param0 = nil); end
  def on_send(node); end
end
class RuboCop::Cop::Rails::I18nLocaleTexts < RuboCop::Cop::Base
  def flash_assignment?(param0 = nil); end
  def mail_subject(param0); end
  def on_send(node); end
  def redirect_to_flash(param0); end
  def validation_message(param0); end
end
class RuboCop::Cop::Rails::IgnoredColumnsAssignment < RuboCop::Cop::Base
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Rails::IgnoredSkipActionFilterOption < RuboCop::Cop::Base
  def filter_options(param0 = nil); end
  def if_and_except?(options); end
  def if_and_only?(options); end
  def on_send(node); end
  def options_hash(options); end
  def remove_node_with_left_space_and_comma(corrector, node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Rails::IndexBy < RuboCop::Cop::Base
  def new_method_name; end
  def on_bad_each_with_object(param0 = nil); end
  def on_bad_hash_brackets_map(param0 = nil); end
  def on_bad_map_to_h(param0 = nil); end
  def on_bad_to_h(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::IndexMethod
end
class RuboCop::Cop::Rails::IndexWith < RuboCop::Cop::Base
  def new_method_name; end
  def on_bad_each_with_object(param0 = nil); end
  def on_bad_hash_brackets_map(param0 = nil); end
  def on_bad_map_to_h(param0 = nil); end
  def on_bad_to_h(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetRailsVersion
  include RuboCop::Cop::IndexMethod
end
class RuboCop::Cop::Rails::Inquiry < RuboCop::Cop::Base
  def on_csend(node); end
  def on_send(node); end
end
class RuboCop::Cop::Rails::InverseOf < RuboCop::Cop::Base
  def as_option?(param0 = nil); end
  def association_recv_arguments(param0 = nil); end
  def conditions_option?(param0 = nil); end
  def foreign_key_option?(param0 = nil); end
  def ignore_scopes?; end
  def inverse_of_nil_option?(param0 = nil); end
  def inverse_of_option?(param0 = nil); end
  def message(options); end
  def on_send(node); end
  def options_contain_inverse_of?(options); end
  def options_from_argument(param0 = nil); end
  def options_ignoring_inverse_of?(options); end
  def options_requiring_inverse_of?(options); end
  def polymorphic_option?(param0 = nil); end
  def same_context_in_with_options?(arg, recv); end
  def scope?(arguments); end
  def through_option?(param0 = nil); end
  def with_options_arguments(recv, node); end
end
class RuboCop::Cop::Rails::LexicallyScopedActionFilter < RuboCop::Cop::Base
  def alias_methods(node); end
  def aliased_action_methods(node, defined_methods); end
  def array_values(node); end
  def defined_action_methods(block); end
  def delegated_action_methods(node); end
  def delegated_methods(param0 = nil); end
  def message(methods, parent); end
  def on_send(node); end
  def only_or_except_filter_methods(param0 = nil); end
end
class RuboCop::Cop::Rails::LinkToBlank < RuboCop::Cop::Base
  def add_rel(send_node, offense_node, corrector); end
  def append_to_rel(rel_node, corrector); end
  def autocorrect(corrector, send_node, node, option_nodes); end
  def blank_target?(param0 = nil); end
  def contains_noopener?(value); end
  def includes_noopener?(param0 = nil); end
  def on_send(node); end
  def rel_node?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Rails::MailerName < RuboCop::Cop::Base
  def autocorrect(corrector, node); end
  def class_definition?(param0 = nil); end
  def class_new_definition?(param0 = nil); end
  def mailer_base_class?(param0 = nil); end
  def mailer_suffix?(mailer_name); end
  def on_class(node); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Rails::MatchRoute < RuboCop::Cop::Base
  def extract_via(node); end
  def http_method?(method); end
  def http_method_and_options(node); end
  def match_method_call?(param0 = nil); end
  def on_send(node); end
  def register_offense(node, http_method); end
  def replacement(path_node, options_node); end
  def via_pair(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RoutesHelper
end
class RuboCop::Cop::Rails::MigrationClassName < RuboCop::Cop::Base
  def basename_without_timestamp_and_suffix(filepath); end
  def camelize(word); end
  def on_class(node); end
  def remove_gem_suffix(file_name); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::MigrationsHelper
end
class RuboCop::Cop::Rails::MultipleRoutePaths < RuboCop::Cop::Base
  def migrate_to_multiple_routes(node, route_paths); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RoutesHelper
end
class RuboCop::Cop::Rails::NegateInclude < RuboCop::Cop::Base
  def negate_include_call?(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Rails::NotNullColumn < RuboCop::Cop::Base
  def add_not_null_column?(param0 = nil); end
  def add_not_null_column_in_change_table?(param0 = nil); end
  def add_not_null_column_via_shortcut_in_change_table?(param0 = nil); end
  def add_not_null_reference?(param0 = nil); end
  def add_not_null_reference_in_change_table?(param0 = nil); end
  def change_table?(param0 = nil); end
  def check_add_column(node); end
  def check_add_column_in_change_table(node, table); end
  def check_add_column_via_shortcut_in_change_table(node, table); end
  def check_add_reference(node); end
  def check_add_reference_in_change_table(node, table); end
  def check_change_table(node); end
  def check_column(type, pairs); end
  def check_pairs(pairs); end
  def default_option?(param0 = nil); end
  def null_false?(param0 = nil); end
  def on_block(node); end
  def on_numblock(node); end
  def on_send(node); end
  include RuboCop::Cop::DatabaseTypeResolvable
  include RuboCop::Cop::MigrationsHelper
end
class RuboCop::Cop::Rails::OrderById < RuboCop::Cop::Base
  def offense_range(node); end
  def on_send(node); end
  def order_by_id?(param0 = nil); end
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Rails::Output < RuboCop::Cop::Base
  def io_output?(param0 = nil); end
  def match_gvar?(sym); end
  def offense_range(node); end
  def on_send(node); end
  def output?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Rails::OutputSafety < RuboCop::Cop::Base
  def i18n_method?(param0); end
  def looks_like_rails_html_safe?(node); end
  def looks_like_rails_raw?(node); end
  def looks_like_rails_safe_concat?(node); end
  def non_interpolated_string?(node); end
  def on_csend(node); end
  def on_send(node); end
end
class RuboCop::Cop::Rails::Pick < RuboCop::Cop::Base
  def message(receiver, current); end
  def on_csend(node); end
  def on_send(node); end
  def pick_candidate?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetRailsVersion
end
class RuboCop::Cop::Rails::Pluck < RuboCop::Cop::Base
  def message(replacement, node); end
  def offense_range(node); end
  def on_block(node); end
  def on_itblock(node); end
  def on_numblock(node); end
  def pluck_candidate?(param0 = nil); end
  def register_offense(node, key); end
  def use_block_argument_in_key?(block_argument, key); end
  def use_one_block_argument?(argument); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetRailsVersion
end
class RuboCop::Cop::Rails::PluckId < RuboCop::Cop::Base
  def offense_range(node); end
  def on_csend(node); end
  def on_send(node); end
  def pluck_id_call?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::ActiveRecordHelper
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Rails::PluckInWhere < RuboCop::Cop::Base
  def on_csend(node); end
  def on_send(node); end
  def root_receiver(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::ActiveRecordHelper
  include RuboCop::Cop::ConfigurableEnforcedStyle
end
class RuboCop::Cop::Rails::PluralizationGrammar < RuboCop::Cop::Base
  def correct_method(method_name); end
  def duration_method?(method_name); end
  def literal_number?(node); end
  def message(number, method_name); end
  def offense?(node); end
  def on_send(node); end
  def plural_method?(method_name); end
  def plural_receiver?(number); end
  def pluralize(method_name); end
  def singular_method?(method_name); end
  def singular_receiver?(number); end
  def singularize(method_name); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Rails::Presence < RuboCop::Cop::Base
  def build_source_for_or_method(other); end
  def current(node); end
  def ignore_if_node?(node); end
  def ignore_other_node?(node); end
  def message(node, receiver, other); end
  def method_range(node); end
  def on_if(node); end
  def redundant_negative_receiver_and_other(param0 = nil); end
  def redundant_receiver_and_other(param0 = nil); end
  def register_offense(node, receiver, other); end
  def replacement(receiver, other, left_sibling); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Rails::Present < RuboCop::Cop::Base
  def autocorrect(corrector, node); end
  def exists_and_not_empty?(param0 = nil); end
  def not_blank?(param0 = nil); end
  def on_and(node); end
  def on_if(node); end
  def on_or(node); end
  def on_send(node); end
  def replacement(node); end
  def unless_blank?(param0 = nil); end
  def unless_condition(node, method_call); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Rails::RakeEnvironment < RuboCop::Cop::Base
  def correct_task_arguments_dependency(task_method); end
  def correct_task_dependency(task_name); end
  def on_block(node); end
  def task_arguments(node); end
  def task_definition?(param0 = nil); end
  def task_name(node); end
  def with_arguments?(node); end
  def with_dependencies?(node); end
  def with_hash_style_dependencies?(hash_node); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Rails::ReadWriteAttribute < RuboCop::Cop::Base
  def build_message(node); end
  def multi_line_message(node); end
  def node_replacement(node); end
  def on_send(node); end
  def read_attribute_replacement(node); end
  def read_write_attribute?(param0 = nil); end
  def single_line_message(node); end
  def within_shadowing_method?(node); end
  def write_attribute_replacement(node); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Rails::RedundantActiveRecordAllMethod < RuboCop::Cop::Base
  def followed_by_query_method?(param0 = nil); end
  def offense_range(node); end
  def on_send(node); end
  def possible_enumerable_block_method?(node); end
  def sensitive_association_method?(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::ActiveRecordHelper
  include RuboCop::Cop::AllowedReceivers
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Rails::RedundantAllowNil < RuboCop::Cop::Base
  def find_allow_nil_and_allow_blank(node); end
  def node_beg(node); end
  def node_end(node); end
  def on_send(node); end
  def register_offense(allow_nil, message); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Rails::RedundantForeignKey < RuboCop::Cop::Base
  def association_with_foreign_key(param0 = nil); end
  def default_foreign_key(node, association_type, association_name, options); end
  def find_as_option(options); end
  def on_send(node); end
  def redundant?(node, association_type, association_name, options, foreign_key); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Rails::RedundantPresenceValidationOnBelongsTo < RuboCop::Cop::Base
  def add_offense_and_correct(node, all_keys, keys, options, presence); end
  def any_belongs_to?(param0 = nil, association:); end
  def belongs_to?(param0 = nil, key:, fk:); end
  def belongs_to_for(model_class_node, key); end
  def belongs_to_with_a_matching_fk?(param0 = nil, param1); end
  def belongs_to_without_fk?(param0 = nil, param1); end
  def extract_validation_for_keys(corrector, node, keys, options); end
  def message_for(keys); end
  def non_optional_belongs_to(node, keys); end
  def on_send(node); end
  def optional?(param0 = nil); end
  def optional_option?(param0 = nil); end
  def presence_validation?(param0 = nil); end
  def remove_keys_from_validation(corrector, node, keys); end
  def remove_presence_option(corrector, presence); end
  def remove_validation(corrector, node); end
  def validation_range(node); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetRailsVersion
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Rails::RedundantReceiverInWithOptions < RuboCop::Cop::Base
  def all_block_nodes_in(param0); end
  def all_send_nodes_in(param0); end
  def autocorrect(corrector, send_node, node); end
  def block_argument_range(node); end
  def on_block(node); end
  def on_itblock(node); end
  def on_numblock(node); end
  def redundant_receiver?(send_nodes, node); end
  def same_value?(arg_node, recv_node); end
  def search_begin_pos_of_space_before_block_argument(begin_pos); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Rails::RedundantTravelBack < RuboCop::Cop::Base
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetRailsVersion
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Rails::ReflectionClassName < RuboCop::Cop::Base
  def association_with_reflection(param0 = nil); end
  def autocorrect(corrector, class_config); end
  def const_or_string(param0 = nil); end
  def on_send(node); end
  def reflection_class_name(param0 = nil); end
  def reflection_class_value?(class_value); end
  def str_assigned?(reflection_class_name); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Rails::RefuteMethods < RuboCop::Cop::Base
  def bad_method?(method_name); end
  def convert_good_method(bad_method); end
  def offense_message(method_name); end
  def offensive?(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::ConfigurableEnforcedStyle
end
class RuboCop::Cop::Rails::RelativeDateConstant < RuboCop::Cop::Base
  def autocorrect(corrector, node); end
  def message(method_name); end
  def nested_relative_date(node, &callback); end
  def offense_range(name, value); end
  def on_casgn(node); end
  def on_masgn(node); end
  def on_or_asgn(node); end
  def relative_date(param0 = nil); end
  def relative_date_or_assignment(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Rails::RenderInline < RuboCop::Cop::Base
  def on_send(node); end
  def render_with_inline_option?(param0 = nil); end
end
class RuboCop::Cop::Rails::RenderPlainText < RuboCop::Cop::Base
  def compatible_content_type?(pair_node); end
  def find_content_type(node); end
  def on_send(node); end
  def render_plain_text?(param0 = nil); end
  def replacement(rest_options, option_value); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Rails::RequestReferer < RuboCop::Cop::Base
  def message(_range); end
  def on_send(node); end
  def referer?(param0 = nil); end
  def wrong_method_name; end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::ConfigurableEnforcedStyle
end
class RuboCop::Cop::Rails::RequireDependency < RuboCop::Cop::Base
  def on_send(node); end
  def require_dependency_call?(param0 = nil); end
  extend RuboCop::Cop::TargetRailsVersion
end
class RuboCop::Cop::Rails::ResponseParsedBody < RuboCop::Cop::Base
  def autocorrect(corrector, node); end
  def check_json_parse_response_body(node); end
  def check_nokogiri_html_parse_response_body(node); end
  def json_parse_response_body?(param0 = nil); end
  def nokogiri_html_parse_response_body(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetRailsVersion
end
class RuboCop::Cop::Rails::ReversibleMigration < RuboCop::Cop::Base
  def all_hash_key?(args, *keys); end
  def change_table_call(param0 = nil); end
  def check_change_table_node(node, block); end
  def check_change_table_offense(receiver, node); end
  def check_drop_table_node(node); end
  def check_irreversible_schema_statement_node(node); end
  def check_remove_column_node(node); end
  def check_remove_columns_node(node); end
  def check_remove_foreign_key_node(node); end
  def check_remove_index_node(node); end
  def check_reversible_hash_node(node); end
  def drop_table_call(param0 = nil); end
  def irreversible_schema_statement_call(param0 = nil); end
  def on_block(node); end
  def on_itblock(node); end
  def on_numblock(node); end
  def on_send(node); end
  def remove_column_call(param0 = nil); end
  def remove_columns_call(param0 = nil); end
  def remove_foreign_key_call(param0 = nil); end
  def remove_index_call(param0 = nil); end
  def reversible_change_table_call?(node); end
  def within_change_method?(node); end
  def within_reversible_or_up_only_block?(node); end
  include RuboCop::Cop::MigrationsHelper
end
class RuboCop::Cop::Rails::ReversibleMigrationMethodDefinition < RuboCop::Cop::Base
  def change_method?(param0 = nil); end
  def on_class(node); end
  def up_and_down_methods?(param0 = nil); end
  include RuboCop::Cop::MigrationsHelper
end
class RuboCop::Cop::Rails::RootJoinChain < RuboCop::Cop::Base
  def evidence(node); end
  def join?(param0 = nil); end
  def on_send(node); end
  def rails_root?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Rails::RootPathnameMethods < RuboCop::Cop::Base
  def build_path_glob_replacement(path); end
  def build_path_replacement(path, method, args); end
  def dir_glob?(param0 = nil); end
  def enforce_double_quotes?; end
  def evidence(node); end
  def include_interpolation?(arguments); end
  def join_arguments(arguments); end
  def on_send(node); end
  def pathname_method(node); end
  def pathname_method_for_ruby_2_4_or_lower(param0 = nil); end
  def pathname_method_for_ruby_2_5_or_higher(param0 = nil); end
  def rails_root?(param0 = nil); end
  def rails_root_pathname?(param0 = nil); end
  def string_literals_config; end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Rails::RootPublicPath < RuboCop::Cop::Base
  def on_send(node); end
  def public_path?(string); end
  def rails_root_public(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Rails::SafeNavigation < RuboCop::Cop::Base
  def autocorrect(corrector, node); end
  def on_send(node); end
  def replacement(method, params); end
  def self.autocorrect_incompatible_with; end
  def try_call(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetRubyVersion
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Rails::SafeNavigationWithBlank < RuboCop::Cop::Base
  def on_if(node); end
  def safe_navigation_blank_in_conditional?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Rails::SaveBang < RuboCop::Cop::Base
  def after_leaving_scope(scope, _variable_table); end
  def allowed_receiver?(node); end
  def argument?(node); end
  def array_parent(node); end
  def assignable_node(node); end
  def call_to_persisted?(node); end
  def check_assignment(assignment); end
  def check_used_in_condition_or_compound_boolean(node); end
  def checked_immediately?(node); end
  def conditional?(parent); end
  def const_matches?(const, allowed_const); end
  def deparenthesize(node); end
  def expected_signature?(node); end
  def explicit_return?(node); end
  def find_method_with_sibling_index(node, sibling_index = nil); end
  def hash_parent(node); end
  def implicit_return?(node); end
  def in_condition_or_compound_boolean?(node); end
  def on_csend(node); end
  def on_send(node); end
  def operator_or_single_negative?(node); end
  def persist_method?(node, methods = nil); end
  def persisted_referenced?(assignment); end
  def receiver_chain_matches?(node, allowed_receiver); end
  def register_offense(node, msg); end
  def return_value_assigned?(node); end
  def right_assignment_node(assignment); end
  def self.joining_forces; end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::NegativeConditional
end
class RuboCop::Cop::Rails::SchemaComment < RuboCop::Cop::Base
  def add_column?(param0 = nil); end
  def add_column_with_comment?(param0 = nil); end
  def add_column_without_comment?(node); end
  def check_column_within_create_table_block(node); end
  def comment_present?(param0 = nil); end
  def create_table?(param0 = nil); end
  def create_table_with_comment?(param0 = nil); end
  def create_table_without_comment?(node); end
  def on_send(node); end
  def t_column?(param0 = nil); end
  def t_column_with_comment?(param0 = nil); end
  def t_column_without_comment?(node); end
  include RuboCop::Cop::ActiveRecordMigrationsHelper
  include RuboCop::Cop::MigrationsHelper
end
class RuboCop::Cop::Rails::ScopeArgs < RuboCop::Cop::Base
  def on_send(node); end
  def scope?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Rails::SelectMap < RuboCop::Cop::Base
  def autocorrect(corrector, select_node, node, preferred_method); end
  def find_select_node(node, column_name); end
  def match_column_name?(select_candidate, column_name); end
  def on_csend(node); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Rails::ShortI18n < RuboCop::Cop::Base
  def long_i18n?(param0 = nil); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::ConfigurableEnforcedStyle
end
class RuboCop::Cop::Rails::SkipsModelValidations < RuboCop::Cop::Base
  def allowed_method?(node); end
  def allowed_methods; end
  def forbidden_methods; end
  def good_insert?(param0 = nil); end
  def good_touch?(param0 = nil); end
  def initialize(*); end
  def message(node); end
  def on_csend(node); end
  def on_send(node); end
end
class RuboCop::Cop::Rails::SquishedSQLHeredocs < RuboCop::Cop::Base
  def message(node); end
  def offense_detected?(node); end
  def on_heredoc(node); end
  def singleline_comments_present?(node); end
  def sql_heredoc?(node); end
  def using_squish?(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::Heredoc
end
class RuboCop::Cop::Rails::StripHeredoc < RuboCop::Cop::Base
  def on_send(node); end
  def register_offense(node, heredoc); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetRubyVersion
end
class RuboCop::Cop::Rails::TableNameAssignment < RuboCop::Cop::Base
  def base_class?(param0 = nil); end
  def on_class(class_node); end
  include RuboCop::Cop::ActiveRecordHelper
end
class RuboCop::Cop::Rails::ThreeStateBooleanColumn < RuboCop::Cop::Base
  def change_column_null?(param0, param1, param2); end
  def on_send(node); end
  def required_options?(param0 = nil); end
  def table_node(node); end
  def three_state_boolean?(param0 = nil); end
  include RuboCop::Cop::MigrationsHelper
end
class RuboCop::Cop::Rails::TimeZone < RuboCop::Cop::Base
  def acceptable_methods(klass, method_name, node); end
  def attach_timezone_specifier?(date); end
  def autocorrect(corrector, node); end
  def autocorrect_time_new(node, corrector); end
  def build_message(klass, method_name, node); end
  def check_localtime(node); end
  def check_time_node(klass, node); end
  def extract_method_chain(node); end
  def flexible?; end
  def good_methods; end
  def method_from_time_class?(node); end
  def method_send?(node); end
  def need_check_localtime?(chain); end
  def not_danger_chain?(chain); end
  def offset_option_provided?(node); end
  def offset_provided?(node); end
  def on_const(node); end
  def on_csend(node); end
  def on_send(node); end
  def remove_redundant_in_time_zone(corrector, node); end
  def replacement(node); end
  def safe_method(method_name, node); end
  def strict?; end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::ConfigurableEnforcedStyle
end
class RuboCop::Cop::Rails::TimeZoneAssignment < RuboCop::Cop::Base
  def on_send(node); end
  def time_zone_assignment?(param0 = nil); end
end
class RuboCop::Cop::Rails::ToFormattedS < RuboCop::Cop::Base
  def on_csend(node); end
  def on_send(node); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetRailsVersion
  include RuboCop::Cop::ConfigurableEnforcedStyle
end
class RuboCop::Cop::Rails::ToSWithArgument < RuboCop::Cop::Base
  def on_csend(node); end
  def on_send(node); end
  def rails_extended_to_s?(node); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetRailsVersion
end
class RuboCop::Cop::Rails::TopLevelHashWithIndifferentAccess < RuboCop::Cop::Base
  def autocorrect(corrector, node); end
  def on_const(node); end
  def top_level_hash_with_indifferent_access?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetRailsVersion
end
class RuboCop::Cop::Rails::TransactionExitStatement < RuboCop::Cop::Base
  def exit_statements(param0); end
  def in_transaction_block?(node); end
  def nested_block?(statement_node); end
  def on_send(node); end
  def rescue_body_return_node?(param0 = nil); end
  def statement(statement_node); end
  def transaction_method?(method_name); end
  def transaction_method_name?(method_name); end
end
class RuboCop::Cop::Rails::UniqBeforePluck < RuboCop::Cop::Base
  def autocorrect(corrector, uniq_node, pluck_node); end
  def on_send(node); end
  def uniq_before_pluck(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::ConfigurableEnforcedStyle
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Rails::UniqueValidationWithoutIndex < RuboCop::Cop::Base
  def array_node_to_array(node); end
  def class_node(node); end
  def column_names(node, uniqueness_part); end
  def column_names_from_scope(uniqueness_part); end
  def condition_hash_part?(pairs, keys:); end
  def condition_part?(node, uniqueness_node); end
  def find_schema_information(node, uniqueness_part); end
  def find_scope(pairs); end
  def include_column_names_in_expression_index?(index, column_names); end
  def on_send(node); end
  def unfreeze_scope(scope); end
  def uniqueness_part(node); end
  def with_index?(klass, table, names); end
  include RuboCop::Cop::ActiveRecordHelper
end
class RuboCop::Cop::Rails::UnknownEnv < RuboCop::Cop::Base
  def collect_variable_like_names(_scope); end
  def environments; end
  def message(name); end
  def on_send(node); end
  def rails_env?(param0 = nil); end
  def unknown_env_name?(name); end
  def unknown_env_predicate?(name); end
  def unknown_environment_equal?(param0 = nil); end
  def unknown_environment_predicate?(param0 = nil); end
end
class RuboCop::Cop::Rails::UnusedIgnoredColumns < RuboCop::Cop::Base
  def appended_ignored_columns(param0 = nil); end
  def check_column_existence(column_node, table); end
  def class_node(node); end
  def column_name(param0 = nil); end
  def ignored_columns(param0 = nil); end
  def on_op_asgn(node); end
  def on_send(node); end
  def table(node); end
  include RuboCop::Cop::ActiveRecordHelper
end
class RuboCop::Cop::Rails::UnusedRenderContent < RuboCop::Cop::Base
  def non_content_status?(param0 = nil); end
  def on_send(node); end
  def unused_render_content?(param0 = nil); end
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Rails::Validation < RuboCop::Cop::Base
  def braced_options(options); end
  def correct_validate_type(corrector, node); end
  def correct_validate_type_for_array(corrector, node, arguments, loc); end
  def correct_validate_type_for_hash(corrector, node, arguments); end
  def frozen_array_argument?(argument); end
  def message(node); end
  def on_send(node); end
  def preferred_method(method); end
  def validate_type(node); end
  extend RuboCop::Cop::AutoCorrector
end
class RuboCop::Cop::Rails::WhereEquals < RuboCop::Cop::Base
  def build_good_method(method_name, column, value); end
  def extract_column_and_value(template_node, value_node); end
  def offense_range(node); end
  def on_csend(node); end
  def on_send(node); end
  def where_method_call?(param0 = nil); end
  def where_not?(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Rails::WhereExists < RuboCop::Cop::Base
  def build_good_method(args, dot:); end
  def build_good_method_exists(args); end
  def build_good_method_where(args, dot_source); end
  def convertable_args?(args); end
  def correction_range(node); end
  def exists_style?; end
  def exists_with_args?(param0 = nil); end
  def find_offenses(node, &block); end
  def on_csend(node); end
  def on_send(node); end
  def where_exists_call?(param0 = nil); end
  def where_style?; end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::ConfigurableEnforcedStyle
end
class RuboCop::Cop::Rails::WhereMissing < RuboCop::Cop::Base
  def message(node, where_argument); end
  def missing_relationship(param0); end
  def multi_condition?(where_arg); end
  def on_send(node); end
  def register_offense(node, where_node, where_argument, range); end
  def remove_where_method(corrector, node, where_node); end
  def replace_range(child); end
  def replace_where_method(corrector, where_node); end
  def root_receiver(node); end
  def same_line?(left_joins_node, where_node); end
  def same_relationship?(where, left_joins); end
  def where_node_and_argument(param0); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetRailsVersion
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Rails::WhereNot < RuboCop::Cop::Base
  def build_good_method(dot, column, value); end
  def extract_column_and_value(template_node, value_node); end
  def offense_range(node); end
  def on_csend(node); end
  def on_send(node); end
  def where_method_call?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::RangeHelp
end
class RuboCop::Cop::Rails::WhereNotWithMultipleConditions < RuboCop::Cop::Base
  def multiple_arguments_hash?(hash); end
  def on_send(node); end
  def where_not_call?(param0 = nil); end
end
class RuboCop::Cop::Rails::WhereRange < RuboCop::Cop::Base
  def build_good_method(method_name, column, value); end
  def extract_column_and_value(template_node, values_node); end
  def find_pair(hash_node, value); end
  def offense_range(node); end
  def on_send(node); end
  def parentheses_needed?(node); end
  def parentheses_not_needed?(node); end
  def parenthesized_call_node?(node); end
  def range_operator(comparison_operator); end
  def where_not?(node); end
  def where_range_call?(param0 = nil); end
  extend RuboCop::Cop::AutoCorrector
  extend RuboCop::Cop::TargetRailsVersion
  extend RuboCop::Cop::TargetRubyVersion
  include RuboCop::Cop::RangeHelp
end
module RuboCop::Rails::MigrationFileSkippable
  def add_global_offense(message = nil, severity: nil); end
  def add_offense(node_or_range, message: nil, severity: nil, &block); end
  def already_migrated_file?; end
  def migrated_schema_version; end
  def self.apply_to_cops!; end
end
