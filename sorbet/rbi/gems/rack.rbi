# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/rack/all/rack.rbi
#
# rack-3.1.16

module Rack
end
module Rack::BadRequest
end
class Rack::QueryParser
  def _normalize_params(params, name, v, depth); end
  def check_query_string(qs, sep); end
  def initialize(params_class, param_depth_limit, bytesize_limit: nil, params_limit: nil); end
  def make_params; end
  def new_depth_limit(param_depth_limit); end
  def normalize_params(params, name, v, _depth = nil); end
  def param_depth_limit; end
  def params_hash_has_key?(hash, key); end
  def params_hash_type?(obj); end
  def parse_nested_query(qs, separator = nil); end
  def parse_query(qs, separator = nil, &unescaper); end
  def self.make_default(param_depth_limit, **options); end
  def unescape(string, encoding = nil); end
end
class Rack::QueryParser::ParameterTypeError < TypeError
  include Rack::BadRequest
end
class Rack::QueryParser::InvalidParameterError < ArgumentError
  include Rack::BadRequest
end
class Rack::QueryParser::QueryLimitError < RangeError
  include Rack::BadRequest
end
class Rack::QueryParser::Params < Hash
  def to_params_hash; end
end
module Rack::Mime
  def match?(value, matcher); end
  def mime_type(ext, fallback = nil); end
  def self.match?(value, matcher); end
  def self.mime_type(ext, fallback = nil); end
end
class Rack::Headers < Hash
  def [](key); end
  def []=(key, value); end
  def assoc(key); end
  def compare_by_identity; end
  def delete(key); end
  def dig(key, *a); end
  def downcase_key(key); end
  def except(*a); end
  def fetch(key, *default, &block); end
  def fetch_values(*a); end
  def has_key?(key); end
  def include?(key); end
  def invert; end
  def key?(key); end
  def member?(key); end
  def merge!(hash, &block); end
  def merge(hash, &block); end
  def reject(&block); end
  def replace(hash); end
  def select(&block); end
  def self.[](*items); end
  def slice(*a); end
  def store(key, value); end
  def to_proc; end
  def transform_keys!; end
  def transform_keys(&block); end
  def transform_values(&block); end
  def update(hash, &block); end
  def values_at(*keys); end
end
module Rack::Utils
  def best_q_match(q_value_header, available_mimes); end
  def build_nested_query(value, prefix = nil); end
  def build_query(params); end
  def byte_ranges(env, size); end
  def clean_path_info(path_info); end
  def clock_time; end
  def delete_cookie_header!(headers, key, value = nil); end
  def delete_set_cookie_header!(header, key, value = nil); end
  def delete_set_cookie_header(key, value = nil); end
  def escape(s); end
  def escape_cookie_key(key); end
  def escape_html(arg0); end
  def escape_path(s); end
  def forwarded_values(forwarded_header); end
  def get_byte_ranges(http_range, size); end
  def parse_cookies(env); end
  def parse_cookies_header(value); end
  def parse_nested_query(qs, d = nil); end
  def parse_query(qs, d = nil, &unescaper); end
  def q_values(q_value_header); end
  def rfc2822(time); end
  def secure_compare(a, b); end
  def select_best_encoding(available_encodings, accept_encoding); end
  def self.best_q_match(q_value_header, available_mimes); end
  def self.build_nested_query(value, prefix = nil); end
  def self.build_query(params); end
  def self.byte_ranges(env, size); end
  def self.clean_path_info(path_info); end
  def self.clock_time; end
  def self.default_query_parser; end
  def self.default_query_parser=(arg0); end
  def self.delete_cookie_header!(headers, key, value = nil); end
  def self.delete_set_cookie_header!(header, key, value = nil); end
  def self.delete_set_cookie_header(key, value = nil); end
  def self.escape(s); end
  def self.escape_cookie_key(key); end
  def self.escape_html(arg0); end
  def self.escape_path(s); end
  def self.forwarded_values(forwarded_header); end
  def self.get_byte_ranges(http_range, size); end
  def self.multipart_file_limit; end
  def self.multipart_file_limit=(arg0); end
  def self.multipart_part_limit; end
  def self.multipart_part_limit=(arg0); end
  def self.multipart_total_part_limit; end
  def self.multipart_total_part_limit=(arg0); end
  def self.param_depth_limit; end
  def self.param_depth_limit=(v); end
  def self.parse_cookies(env); end
  def self.parse_cookies_header(value); end
  def self.parse_nested_query(qs, d = nil); end
  def self.parse_query(qs, d = nil, &unescaper); end
  def self.q_values(q_value_header); end
  def self.rfc2822(time); end
  def self.secure_compare(a, b); end
  def self.select_best_encoding(available_encodings, accept_encoding); end
  def self.set_cookie_header!(headers, key, value); end
  def self.set_cookie_header(key, value); end
  def self.status_code(status); end
  def self.unescape(s, encoding = nil); end
  def self.unescape_path(s); end
  def self.valid_path?(path); end
  def set_cookie_header!(headers, key, value); end
  def set_cookie_header(key, value); end
  def status_code(status); end
  def unescape(s, encoding = nil); end
  def unescape_path(s); end
  def valid_path?(path); end
end
class Rack::Utils::Context
  def app; end
  def call(env); end
  def context(env, app = nil); end
  def for; end
  def initialize(app_f, app_r); end
  def recontext(app); end
end
